# frozen_string_literal: true

{{#generated_src_warning}}
{{generated_src_warning}}
{{/generated_src_warning}}

module {{module_name}}
  module Plugins
    class Endpoints < Seahorse::Client::Plugin
      option(
        :endpoint_provider,
        doc_type: '{{module_name}}::EndpointProvider',
        docstring: 'The endpoint provider used to resolve endpoints. Any '\
                   'object that responds to `#resolve_endpoint(parameters)` '\
                   'where `parameters` is a Struct similar to '\
                   '`{{module_name}}::EndpointParameters`'
      ) do
        {{module_name}}::EndpointProvider.new
      end

      {{#endpoint_options}}
      option(
        :{{name}},
        doc_type: '{{doc_type}}',
        docstring: "{{docstring}}")

      {{/endpoint_options}}
      # @api private
      class Handler < Seahorse::Client::Handler
        def call(context)
          params = parameters_for_operation(context)
          endpoint = context.config.endpoint_provider.resolve_endpoint(params)
          context[:endpoint] = endpoint
          @handler.call(context)
        end

        private

        def parameters_for_operation(context)
          case context.operation_name
          {{#endpoint_classes}}
          when :{{operation_name}}
            {{module_name}}::Endpoints::{{class_name}}.build(context)
          {{/endpoint_classes}}
          end
        end
      end

      def add_handlers(handlers, _config)
        handlers.add(Handler, step: :build, priority: 40)
      end
    end
  end
end
